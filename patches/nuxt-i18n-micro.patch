diff --git a/dist/runtime/plugins/01.plugin.js b/dist/runtime/plugins/01.plugin.js
index cca0fdf7f67011705020f4c673560ed8757b6033..0d344b6d71e6e14682e5ce1249f93a1753ee658f 100644
--- a/dist/runtime/plugins/01.plugin.js
+++ b/dist/runtime/plugins/01.plugin.js
@@ -140,6 +140,7 @@ export default defineNuxtPlugin(async (nuxtApp) => {
     const locale = getCurrentLocale(to, i18nConfig, hashLocale2);
     if (!i18nHelper.hasGeneralTranslation(locale)) {
       const data = await $fetch(`/${apiBaseUrl}/general/${locale}/data.json?v=${i18nConfig.dateBuild}`, { baseURL: i18nConfig.baseURL });
+      console.log('data', data)
       await i18nHelper.loadTranslations(locale, data ?? {});
     }
     if (!i18nConfig.disablePageLocales) {
diff --git a/dist/runtime/server/middleware/i18n-loader.js b/dist/runtime/server/middleware/i18n-loader.js
index 6b7b6be5720d791cb766313f37928dccb77fbe13..df525acd0ee9aa5b1e5cead9ab229dd1778e3be7 100644
--- a/dist/runtime/server/middleware/i18n-loader.js
+++ b/dist/runtime/server/middleware/i18n-loader.js
@@ -45,15 +45,18 @@ export default defineEventHandler(async (event) => {
   });
   let translations = {};
   for (const translationPath of paths) {
+    console.log('translationPath', translationPath)
     try {
       const fileContent = await readFile(translationPath, "utf-8");
+      console.log('fileContent', fileContent)
       const content = JSON.parse(fileContent);
       if (isEmptyObject(translations)) {
         translations = content;
       } else {
         translations = deepMerge(translations, content);
       }
-    } catch {
+    } catch(error) {
+      console.log('ERROR READ FILE i18n', error)
     }
   }
   return translations;
diff --git a/dist/runtime/translationHelper.js b/dist/runtime/translationHelper.js
index 850045ec8ed59d1f3036f66ee7fbd32ef22e5433..86ba11300a840a23a18cfd56e8dd1583d893ba9e 100644
--- a/dist/runtime/translationHelper.js
+++ b/dist/runtime/translationHelper.js
@@ -58,7 +58,9 @@ export function useTranslationHelper() {
       };
     },
     hasGeneralTranslation(locale) {
-      return !!generalLocaleCache[locale];
+      const general = generalLocaleCache[locale]
+      console.log('hasGeneralTranslation', general)
+      return !!general;
     },
     hasPageTranslation(locale, routeName) {
       return !!routeLocaleCache[`${locale}:${routeName}`];
