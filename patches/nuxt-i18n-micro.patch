# diff --git a/dist/runtime/server/middleware/i18n-loader.js b/dist/runtime/server/middleware/i18n-loader.js
# index 6b7b6be5720d791cb766313f37928dccb77fbe13..ed366a35523ea269209f6770db9d699cf2e023b0 100644
# --- a/dist/runtime/server/middleware/i18n-loader.js
# +++ b/dist/runtime/server/middleware/i18n-loader.js
# @@ -1,7 +1,7 @@
#  import { resolve } from "node:path";
#  import { readFile } from "node:fs/promises";
#  import { defineEventHandler } from "h3";
# -import { useRuntimeConfig, createError } from "#imports";
# +import { useRuntimeConfig, createError, useStorage } from "#imports";
#  function deepMerge(target, source) {
#    for (const key of Object.keys(source)) {
#      if (key === "__proto__" || key === "constructor") {
# @@ -37,22 +37,39 @@ export default defineEventHandler(async (event) => {
#    const paths = [];
#    if (fallbackLocale && fallbackLocale !== locale) {
#      rootDirs.forEach((dir) => {
# -      paths.push(resolve(dir, translationDir, getTranslationPath(fallbackLocale, page)));
# +      paths.push(
# +        {
# +          translationPath: resolve(dir, translationDir, getTranslationPath(fallbackLocale, page)),
# +          name: `_locales/${getTranslationPath(fallbackLocale, page)}`,
# +        }
# +      );
#      });
#    }
#    rootDirs.forEach((dir) => {
# -    paths.push(resolve(dir, translationDir, getTranslationPath(locale, page)));
# +    paths.push({
# +      translationPath: resolve(dir, translationDir, getTranslationPath(locale, page)),
# +      name: `_locales/${getTranslationPath(locale, page)}`,
# +    });
#    });
#    let translations = {};
# -  for (const translationPath of paths) {
# +  const serverStorage = await useStorage('assets:server')
# +  for (const {translationPath, name} of paths) {
#      try {
# -      const fileContent = await readFile(translationPath, "utf-8");
# -      const content = JSON.parse(fileContent);
# +      const isThereAsset = await serverStorage.hasItem(name)
# +      
# +      const fileContent = (isThereAsset && !import.meta.prerender) ? await serverStorage.getItemRaw(name) : await readFile(translationPath, 'utf-8')
# +      const content = JSON.parse(fileContent)
# +      if (!isThereAsset && import.meta.prerender) {
# +        // write to server assets while building
# +        await serverStorage.setItem(name, fileContent)
# +      }
# +
#        if (isEmptyObject(translations)) {
#          translations = content;
#        } else {
#          translations = deepMerge(translations, content);
#        }
# +
#      } catch {
#      }
#    }
